<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Taehoon&#39;s Blog</title>
    <link>https://taehoon02.github.io/posts/</link>
    <description>Recent content in Posts on Taehoon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 09 Jul 2018 21:31:00 +0830</lastBuildDate>
    <atom:link href="https://taehoon02.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ubuntu Gnome 16.04 설치하기</title>
      <link>https://taehoon02.github.io/posts/how-to-install-ubuntu-gnome-16.04/</link>
      <pubDate>Mon, 09 Jul 2018 21:31:00 +0830</pubDate>
      
      <guid>https://taehoon02.github.io/posts/how-to-install-ubuntu-gnome-16.04/</guid>
      <description>

&lt;h3 id=&#34;필자의-노트북-상태:d63adf24022123471103a2b20c7f1edb&#34;&gt;필자의 노트북 상태&lt;/h3&gt;

&lt;p&gt;노트북이 Samsung Laptop 5 NT500R5L-Y54M 인지라 쓸데없이 많이 깔면 무한 로그인 혹은 무한 가상콘솔로 빠지게 된다. &lt;del&gt;(내가 이것땜에 3일동안 우분투 재설치만 조지게 반복했음.)&lt;/del&gt;&lt;br&gt;
따라서 아래 링크를 참고하되, 몇가지 개선사항을 내놓는다.&lt;/p&gt;

&lt;h3 id=&#34;ubuntu-gnome-16-04-설치하기:d63adf24022123471103a2b20c7f1edb&#34;&gt;ubuntu gnome 16.04 설치하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://b.chalk.pe/posts/setting-up-ubuntu-gnome-16-04/&#34;&gt;https://b.chalk.pe/posts/setting-up-ubuntu-gnome-16-04/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;그대로-따라하되-다른-점-개선사항:d63adf24022123471103a2b20c7f1edb&#34;&gt;그대로 따라하되 다른 점 (개선사항)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;자바 설치 X&lt;/li&gt;
&lt;li&gt;mongodb 설치 X&lt;/li&gt;
&lt;li&gt;필수 패키지 설치에서 마지막 세문장 변경&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update
sudo apt install git fcitx fcitx-hangul nodejs yarn numix-icon-theme-circle
sudo apt upgrade &amp;amp;&amp;amp; sudo apt autoremove
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Freon 설치 X&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;bash-대신-zsh-사용하기:d63adf24022123471103a2b20c7f1edb&#34;&gt;bash 대신 zsh 사용하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://b.chalk.pe/posts/setting-up-oh-my-zsh/&#34;&gt;https://b.chalk.pe/posts/setting-up-oh-my-zsh/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IROC 2018</title>
      <link>https://taehoon02.github.io/posts/IROC_2018/</link>
      <pubDate>Wed, 06 Jun 2018 17:03:00 +0900</pubDate>
      
      <guid>https://taehoon02.github.io/posts/IROC_2018/</guid>
      <description>

&lt;h1 id=&#34;로봇올림피아드:ce00f1e2390cd84087f11a5f391d7db3&#34;&gt;&lt;strong&gt;&lt;em&gt;로봇올림피아드&lt;/em&gt;&lt;/strong&gt;&lt;/h1&gt;

&lt;h1 id=&#34;weaver:ce00f1e2390cd84087f11a5f391d7db3&#34;&gt;&lt;em&gt;Weaver&lt;/em&gt;&lt;/h1&gt;

&lt;h3 id=&#34;제작의도:ce00f1e2390cd84087f11a5f391d7db3&#34;&gt;&lt;em&gt;제작의도&lt;/em&gt;&lt;/h3&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://taehoon02.github.io/images/iroc_2018/whitening.jpg&#34; alt=&#34;whitening&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;blockquote&gt;
&lt;p&gt;(흰 부분이 전부 백화현상이 나타나 산호가 죽은 곳이다)
산호지대에는 바다의 존재하는 생물의 5분의 1이상이 모여 살고있다.
현재, 산호지대는 바다의 온도가 높아져 백화현상으로 인해 파괴되어 가는 중이다.
산호지대가 파괴되면 바다 생물의 5분의 1이상이 삶의 터전을 잃게 된다.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://taehoon02.github.io/images/iroc_2018/marine_litter.jpg&#34; alt=&#34;marine_litter&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;blockquote&gt;
&lt;p&gt;(산호지대 바다위에 떠다니는 많은 양의 쓰레기이다.)
또한, 바다에 버려지느 해양 쓰레기는 이제 지구촌의 문제가 되었다. 각국에서는 해양 쓰레기를 줄이기 위해 여러가지 대안을 내놓고 있으나, 해결되지 않고있다. 해양쓰레기는 바다를 오염시키는 것은 물론, 해양 생물들의 서식마저 위협한다.
이 두가지 이유가 바다를 위험에 빠트리고 있다. 바다 환경을 지켜 생물들을 안전하게 살 수 있도록 하기 위해 우리는 백화현상을 막고, 산호가 자랄 수 있는 환경을 조성해주는 로봇, 해양 쓰레기를 수거하고 다니는 로봇인 Weaver를 만들게 되었다.
떠돌아 다니는 쓰레기로 인해 많은 생물들이 먹인줄  알고 착각하여 먹어 죽어가고 있다.
따라서 이에 대한 대책 마련이 필요하기 때문에 이와같은 로봇을 제작하게 되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;우리가-만든-로봇의-목적:ce00f1e2390cd84087f11a5f391d7db3&#34;&gt;&lt;em&gt;우리가 만든 로봇의 목적&lt;/em&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;바다 생물의 생태계를 파괴하는 백화현상을 막고, 없애 산호가 다시 살 수 있는 환경을 조성해주며, 해양 쓰레기를 바다 위에 떠 다니면서 청소한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;기능:ce00f1e2390cd84087f11a5f391d7db3&#34;&gt;&lt;em&gt;기능&lt;/em&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;배 등의 운송수단에 의해 로봇 Weaver가 산호지대에 떨어지면, 3게의 터빈을 이용해
바다 위를 떠 다니면서 오호와 같은 재질로 감싸진 드라이 아이스를 떨어트린다.
드라이아이스가 기화되어 팽창하면 오호 막이 터지게 되면서 이산화 탄소가 퍼지게&lt;br /&gt;
된다.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://taehoon02.github.io/images/iroc_2018/cf_1.png&#34; alt=&#34;cf_1&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;blockquote&gt;
&lt;p&gt;산호를 구성하는 탄산칼슘과 드라이아이스의 기화로 퍼지게되는
이산화탄소, 그리고 바다의 물이 만나 탄산수소칼슘을 생성하게 되는데 이를 통해
백화 성분을 녹여 산호가 살 수 있는 환경을 조성하고 바다의 pH농도를 낮추어 산호에 악영향을 주는 &lt;strong&gt;해양산성화를 약화&lt;/strong&gt;시킨다.&lt;/p&gt;

&lt;p&gt;그 뿐만이 아니라 바다위를 떠 다니면서 바다위에 떠있는 쓰레기를 수거하여 해양 생물들이 쓰레기로 인해 피해를 받게 되는 것을 막아준다.&lt;/p&gt;

&lt;p&gt;GPS센서를 사용하여 바다에 흩어져 있는 여러대의 Weaver의 위치를 알 수 있고, 이는 웹페이지를 통해 확인할 수 있다. 웹페이지에서는 Weaver의 위치, Weaver의 드라이아이스 투하 시기, 바다 pH농도, 바다 온도 등의 수치화된 자료를 확인할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;특징:ce00f1e2390cd84087f11a5f391d7db3&#34;&gt;&lt;em&gt;특징&lt;/em&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;산호는 백화현상이 진행되고 있더라도 산호가 살 수 있는 환경이 다시 조성되면 백화현상을 이겨낸다고 한다. 이러한 점을 이용하여 산호가 조성될 수 있는 환경을 만들어낸다.&lt;/li&gt;
&lt;li&gt;쓰레기를 수거하여 바다를 보다 깨끗한 환경으로 만들어낼 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;현재 바다의 상태 등을 웹페이지로 쉽게 확인 할 수 있어 용이하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>npm scripts와 gulp 비교</title>
      <link>https://taehoon02.github.io/posts/npm-scripts__vs__gulp/</link>
      <pubDate>Tue, 24 Apr 2018 18:18:00 +0900</pubDate>
      
      <guid>https://taehoon02.github.io/posts/npm-scripts__vs__gulp/</guid>
      <description>

&lt;h1 id=&#34;npm-scripts와-gulp-비교:488277c0661887b82f83e27e48b1d35e&#34;&gt;npm scripts와 gulp 비교&lt;/h1&gt;

&lt;h2 id=&#34;npm-scripts:488277c0661887b82f83e27e48b1d35e&#34;&gt;npm scripts&lt;/h2&gt;

&lt;h3 id=&#34;장점:488277c0661887b82f83e27e48b1d35e&#34;&gt;장점&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm scripts&lt;/code&gt;는 낮은 수준이며 사용하고자 하는 실제 라이브러리를 활용합니다.(예: &amp;ldquo;lint&amp;rdquo;: &amp;ldquo;eslint ./&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;은 사용 가능한 스크립트를 확인하는 중앙에 위치합니다.(&lt;code&gt;npm run&lt;/code&gt;도 모든 스크립트를 나열)&lt;/li&gt;
&lt;li&gt;작업이 너무 복잡해지면 다른 파일로 이동할 수 있습니다.(예: &amp;ldquo;complex-script&amp;rdquo;: &amp;ldquo;babel-node tools/complex-script.js&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm scripts&lt;/code&gt;는 처음에 생각했던 것보다 더 강력합니다.(예: pre/post hooks, passing arguments, config variables, chaining, piping 등)&lt;/li&gt;
&lt;li&gt;우리는 다음에 큰 것(Anvil, brocolli, Grunt, Gulp)이 나올 때 특정한 구조 추상화에 얽매이지 않을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;단점:488277c0661887b82f83e27e48b1d35e&#34;&gt;단점&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;모든 사람이 &lt;code&gt;npm scripts&lt;/code&gt;에 익숙한 것은 아닙니다.&lt;/li&gt;
&lt;li&gt;일부 스크립트는 시간이 오래 걸리고 번거롭습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;편리한-모듈들:488277c0661887b82f83e27e48b1d35e&#34;&gt;편리한 모듈들&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm-run-all&lt;/code&gt;: 여러개의 스크립트를 병렬 또는 순차적으로 실행하는 CLI도구입니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rimraf&lt;/code&gt;: 노드에 대한 딥 삭제 모듈 (&lt;code&gt;rm -rf&lt;/code&gt; 처럼)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onchange&lt;/code&gt;: 파일 세트를 보려면 glob패턴을 사용하고 추가, 변경 또는 삭제된 항목이 있을 때 명령을 실행할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gulp:488277c0661887b82f83e27e48b1d35e&#34;&gt;gulp&lt;/h2&gt;

&lt;h3 id=&#34;장점-1:488277c0661887b82f83e27e48b1d35e&#34;&gt;장점&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;gulp 플러그인과 유틸리티가 많습니다.&lt;/li&gt;
&lt;li&gt;공통적인 Gulp작업을 제공하기 위한 일부 도우미 라이브러리가 이미 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;단점-1:488277c0661887b82f83e27e48b1d35e&#34;&gt;단점&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Gulp 플러그인은 오래된 경우가 많으며, 기본 라이브러리의 새 기능을 지원하지 않습니다.&lt;/li&gt;
&lt;li&gt;포장된 라이브러리가 아닌 Gulp 플러그인 작성자에게 종속되어 있습니다.&lt;/li&gt;
&lt;li&gt;Gulp 플러그인 문서는 일반적으로 매우 강력하지 않고 포괄적이지 않습니다.&lt;/li&gt;
&lt;li&gt;Gulp 플러그인을 디버깅하는 것은 당신에게 좌절을 줄 수 있습니다. 플러그인이나 기존 라이브러리에 문제가 있을 수 있거든요.&lt;/li&gt;
&lt;li&gt;만약 Gulp에 대한 플러그인이 없는 경우 당신이 직접 작성해야 합니다.&lt;/li&gt;
&lt;li&gt;Gulp 내에서 발생하는 오류는 대부분 잘 처리되지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;고려할-생각:488277c0661887b82f83e27e48b1d35e&#34;&gt;고려할 생각&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;오직 &lt;code&gt;npm scripts&lt;/code&gt;로만 전환하는가, Gulp를 계속 사용하는가, 아니면 이 둘을 혼합하여 사용하는가?&lt;/li&gt;
&lt;li&gt;만일 우리가 &lt;code&gt;npm scripts&lt;/code&gt;와 Gulp의 합성된 무엇인가를 가지고 있다면 우리는 어떻게 무엇을 해야할지 결정해야되는가? 어느 정도의 복잡성 임계값이 충족될 때까지 &lt;code&gt;npm scripts&lt;/code&gt;라는 가정으로 시작해야 하는가? 우리가 새로운 프로젝트에 &lt;code&gt;npm scripts&lt;/code&gt;만을 사용하고 복잡성이 증가할 때 &lt;code&gt;tools/script-file.js&lt;/code&gt;로 바꿀 수 있는가? (예는 &lt;a href=&#34;https://github.com/coryhouse/react-slingshot&#34;&gt;react-slingshot&lt;/a&gt; 참조)&lt;/li&gt;
&lt;li&gt;이미 시행된 위험이 있는 프로젝트는 어떻게 조정하고 있는가? 계속해서 업데이트하고 있는가, 계속 업데이트하고 있는 것으로 확인될 경우에는 &lt;code&gt;npm scripts&lt;/code&gt;로 전환하는 것을 고려할 수 있는가?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;이-문서는-여기-https-gist-github-com-elijahmanor-179e47828bf760c218bb3820d929836d-의-내용을-번역한-것입니다-오역-지적-받습니다:488277c0661887b82f83e27e48b1d35e&#34;&gt;이 문서는 &lt;a href=&#34;https://gist.github.com/elijahmanor/179e47828bf760c218bb3820d929836d&#34;&gt;여기&lt;/a&gt;의 내용을 번역한 것입니다. 오역 지적 받습니다.&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>GitHub API Tree 사용하기</title>
      <link>https://taehoon02.github.io/posts/how_to_github_api_tree/</link>
      <pubDate>Wed, 11 Apr 2018 12:15:00 +0900</pubDate>
      
      <guid>https://taehoon02.github.io/posts/how_to_github_api_tree/</guid>
      <description>

&lt;h3 id=&#34;준비할-것:6aade633742390beb32d644141ee5636&#34;&gt;준비할 것&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt; 설치&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com&#34;&gt;github api token&lt;/a&gt; 받기 (github settings -&amp;gt; developer settings -&amp;gt; personal access tokens 에서 토큰 발급. (이 토큰은 잘 알아두도록 하자.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;tree-구하기:6aade633742390beb32d644141ee5636&#34;&gt;Tree 구하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.github.com/v3/git/trees/&#34;&gt;GitHub API Tree&lt;/a&gt;를 참고하여 작성한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Postman 실행&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Authorization TYPE을 Basic Auth 로 하고 오른쪽에서 GitHub Username과 Password을 입력 후 왼쪽 Preview Request 버튼을 클릭한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;위쪽을 GET으로 하고 url에 &lt;code&gt;https://api.github.com/repos/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;/git/refs/heads/master&lt;/code&gt; 을 입력 후 Send를 클릭한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;아래쪽 JSON 확장자명으로 된 파일 내용이 출력되는데 이 중에 object 안의 sha 부분을 복사한다. (숫자 영어로 되어있는 엄청나게 긴 부분)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아래 1번과 2번의 차이는 전자는 폴더 상위 내용을 포함하지 않고 후자는 폴더 상위 내용을 포함한다.&lt;br&gt;
자신이 필요한 Tree를 구하도록 하자.&lt;br&gt;
?recursive=1이 폴더 상위 내용을 포함한다고 선언하는 것이다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;위쪽을 GET으로 하고 url에 &lt;code&gt;https://api.github.com/repos/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;/git/trees/&amp;lt;sha&amp;gt;&lt;/code&gt; 을 입력 후 Send를 클릭한다. -&amp;gt; 깃허브 tree가 완성되었다!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;위쪽을 GET으로 하고 url에 &lt;code&gt;https://api.github.com/repos/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;/git/trees/&amp;lt;sha&amp;gt;?recursive=1&lt;/code&gt; 을 입력 후 Send를 클릭한다. -&amp;gt; 깃허브 tree가 완성되었다!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;마치면서:6aade633742390beb32d644141ee5636&#34;&gt;마치면서&lt;/h3&gt;

&lt;p&gt;더 다양한 &lt;a href=&#34;https://developer.github.com/&#34;&gt;GitHub API&lt;/a&gt;는 &lt;a href=&#34;https://developer.github.com/&#34;&gt;여기&lt;/a&gt;를 참고하세요!&lt;br&gt;
오역이나 궁금한 점은 &lt;a href=&#34;https://taehoon02.github.io/about&#34;&gt;About&lt;/a&gt;의 연락망으로 연락해주시면 친절히 답변해드립니다.&lt;br&gt;물론 영어가 딸려서 한국분만 해당됩니다^^&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 블로그 만들기</title>
      <link>https://taehoon02.github.io/posts/Create-Hugo-Blog/</link>
      <pubDate>Wed, 04 Apr 2018 21:31:00 +0900</pubDate>
      
      <guid>https://taehoon02.github.io/posts/Create-Hugo-Blog/</guid>
      <description>

&lt;h3 id=&#34;시작하기-전에:ece8866be95f06ecf0f929997c597b6e&#34;&gt;시작하기 전에&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;windows를 기준으로 설명한다. (필자는 windows 10)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;go언어&lt;/a&gt;를 설치하자.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;github pages이므로 git 설치 안했다고 빼애액거리면 때리러감.&lt;br&gt;그러므로 git을 설치하자^^&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;시작하기:ece8866be95f06ecf0f929997c597b6e&#34;&gt;시작하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;Install Hugo&lt;/a&gt;에 나와있는데로 &lt;a herf=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;을 통해서 설치할 수도 있지만 다른 방법을 사용하여 Hugo 설치 및 깃허브 호스팅 방법을 올리도록 하겠다.&lt;/p&gt;

&lt;h3 id=&#34;hugo-설치:ece8866be95f06ecf0f929997c597b6e&#34;&gt;Hugo 설치&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt;에 들어가 최신버전의 Hugo를 다운받는다. (windows-32bit.zip 혹은 windows-64bit.zip 을 자신의 컴퓨터에 알맞게 선택하여 설치)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hugo 폴더를 만들고 안에 bin 폴더를 만든다. (C:\Hugo\bin)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;다운받은 압축파일의 내용물만 bin폴더에 푼다. (hugo.exe, README.md, LICENSE.md)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;설치 완료.&lt;/p&gt;

&lt;h3 id=&#34;hugo-블로그-만들기:ece8866be95f06ecf0f929997c597b6e&#34;&gt;Hugo 블로그 만들기&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Hugo 폴더에서 시작한다. (C:\Hugo)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;새로운 사이트를 만든다.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new site &amp;lt;site_name&amp;gt;
ex) $ hugo new site blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;사이트 생성 완료.&lt;/p&gt;

&lt;h3 id=&#34;테마-적용하기:ece8866be95f06ecf0f929997c597b6e&#34;&gt;테마 적용하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo Themes&lt;/a&gt;에서 원하는 테마의 git 저장소 URL을 확인한다. 그리고 생성된 사이트 폴더에서 아래와 같이 cmd에 입력.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd themes
$ git clone &amp;lt;repo_url_of_theme&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;테마 설치 완료.&lt;br&gt;
그리고 테마에 대한 내용을 복붙하거나 테마 git README 파일에서 하라는 대로 하면 테마가 적용된다.&lt;/p&gt;

&lt;h3 id=&#34;configuration:ece8866be95f06ecf0f929997c597b6e&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;config.[toml|yaml|json]&lt;br&gt;
Hugo 프로젝트의 설정파일이다. 테마별로 빌드관련 설정이 다르므로 테마에서 제공하는 config.[toml|yaml|json] 파일을 가져온 후 아래와 같은 정보를 추가한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;baseurl = &amp;quot;&amp;lt;domain&amp;gt;&amp;quot;
languageCode = &amp;quot;ko&amp;quot;
title = &amp;quot;title&amp;quot;
theme = &amp;quot;theme_name&amp;quot;

contentdir = &amp;quot;content&amp;quot;
layoutdir = &amp;quot;layouts&amp;quot;
staticdir = &amp;quot;static&amp;quot;
publishdir = &amp;quot;public&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;여기에서 가장 중요한 것은 publishdir, baseurl, theme 정도.&lt;br&gt;
publishdir은 깃허브 호스팅을 위해 꼭 필요하므로 꼭 기입하기 바란다. 또한 baseurl의 경우 깃허브 호스팅을 사용하기 위함이라면 &lt;code&gt;https://&amp;lt;username&amp;gt;.github.io/&lt;/code&gt; 로 입력하자.&lt;/p&gt;

&lt;h3 id=&#34;로컬환경에서-사이트-확인:ece8866be95f06ecf0f929997c597b6e&#34;&gt;로컬환경에서 사이트 확인&lt;/h3&gt;

&lt;p&gt;로컬환경에서 사이트를 볼 수 있다. site_name 폴더에서 시작한다. (C:\Hugo\site-name)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 &lt;a href=&#34;http://localhost:1313&gt;&lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;/a&gt; 로 접속하여 확인 가능하다.&lt;/p&gt;

&lt;h3 id=&#34;깃허브-호스팅으로-사이트-공유하기:ece8866be95f06ecf0f929997c597b6e&#34;&gt;깃허브 호스팅으로 사이트 공유하기&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;깃허브에서 username.github.io 레포를 만든다.&lt;/li&gt;
&lt;li&gt;site_name 폴더에서 시작한다. (C:\Hugo\site-name)&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo
$ cd public
$ git init
$ git add .
$ git commit -m &amp;quot;initial&amp;quot;
$ git remote add origin https://github.com/username/username.github.io.git
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;포스트-추가:ece8866be95f06ecf0f929997c597b6e&#34;&gt;포스트 추가&lt;/h3&gt;

&lt;p&gt;포스트 추가도 깃허브 호스팅에서와 같은 방법으로 하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo
$ cd public
$ git init
$ git add .
$ git commit -m &amp;quot;initial&amp;quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;마치면서:ece8866be95f06ecf0f929997c597b6e&#34;&gt;마치면서&lt;/h3&gt;

&lt;p&gt;필자는 &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;을 사용하지 않았는데 &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;에 굉장히 만족하고 있다.&lt;/p&gt;

&lt;p&gt;오역이나 궁금한 점은 &lt;a href=&#34;https://taehoon02.github.io/about&#34;&gt;About&lt;/a&gt;의 연락망으로 연락해주시면 친절히 답변해드립니다.&lt;br&gt;물론 영어가 딸려서 한국분만 해당됩니다^^&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>